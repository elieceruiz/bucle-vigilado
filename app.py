import streamlit as st
from datetime import datetime, timedelta
from pymongo import MongoClient
import pytz
import pandas as pd
from dateutil.relativedelta import relativedelta
from openai import OpenAI
from math import sqrt
from collections import Counter

# Configuraci√≥n p√°gina y zona horaria para Colombia
st.set_page_config(page_title="Reinicia", layout="centered")
colombia = pytz.timezone("America/Bogota")

# Conexi√≥n a MongoDB usando st.secrets para seguridad
client = MongoClient(st.secrets["mongo_uri"])
db = client["registro_bucle"]
coleccion_eventos = db["eventos"]
coleccion_reflexiones = db["reflexiones"]
coleccion_hitos = db["hitos"]
coleccion_visual = db["log_visual"]

# Cliente OpenAI para clasificaci√≥n autom√°tica de reflexiones
openai_client = OpenAI(api_key=st.secrets["openai_api_key"])

# Definici√≥n de los eventos que se registrar√°n
evento_a = "La Iniciativa Aquella"
evento_b = "La Iniciativa de Pago"
eventos = {
    "üß† Reflexi√≥n": "reflexion",
    "üìë Historial completo": "historial",
    "‚úäüèΩ": evento_a,
    "üí∏": evento_b,
}

# Sistema categorial con todas las categor√≠as y subcategor√≠as para clasificar reflexiones
sistema_categorial = {
    "1.1": {"categoria": "Din√°micas cotidianas", "subcategoria": "Organizaci√≥n del tiempo",
            "descriptor": "Manejo de rutinas y distribuci√≥n del d√≠a",
            "observable": "Relatos sobre horarios de trabajo, estudio, momentos de ocio, tiempo dedicado a la intimidad."},
    "1.2": {"categoria": "Din√°micas cotidianas", "subcategoria": "Relaciones sociales",
            "descriptor": "Interacciones que influyen en la vida √≠ntima.",
            "observable": "Narraciones sobre pareja, amigos, familia; menciones de aprobaci√≥n o desaprobaci√≥n social."},
    "1.3": {"categoria": "Din√°micas cotidianas", "subcategoria": "Contextos de intimidad",
            "descriptor": "Espacios f√≠sicos y virtuales donde se desarrollan las pr√°cticas.",
            "observable": "Lugares mencionados (casa, moteles, internet, calle), dispositivos usados, condiciones de privacidad."},
    "1.4": {"categoria": "Din√°micas cotidianas", "subcategoria": "Factores emocionales",
            "descriptor": "Estados afectivos vinculados al ejercicio de la sexualidad.",
            "observable": "Expresiones de soledad, ansiedad, deseo, satisfacci√≥n o culpa."},
    "2.1": {"categoria": "Consumo de sexo pago", "subcategoria": "Motivaciones",
            "descriptor": "Razones personales y sociales para pagar por sexo.",
            "observable": "Relatos de b√∫squeda de placer, compa√±√≠a, evasi√≥n, curiosidad, necesidad de afecto."},
    "2.2": {"categoria": "Consumo de sexo pago", "subcategoria": "Pr√°cticas asociadas",
            "descriptor": "Formas de acceder y realizar el consumo.",
            "observable": "Lugares (bares, calles, plataformas digitales), frecuencia, monto pagado, modalidades de encuentro."},
    "2.3": {"categoria": "Consumo de sexo pago", "subcategoria": "Representaciones",
            "descriptor": "Significados culturales y personales del sexo pago.",
            "observable": "Uso de t√©rminos como tab√∫, normal, peligroso, necesario, transgresi√≥n; narrativas de estigma o aceptaci√≥n."},
    "2.4": {"categoria": "Consumo de sexo pago", "subcategoria": "Efectos en la trayectoria √≠ntima",
            "descriptor": "Impacto en la experiencia personal y en la memoria √≠ntima.",
            "observable": "Relatos de aprendizaje, arrepentimiento, culpa, gratificaci√≥n, comparaci√≥n con otras pr√°cticas sexuales."},
    "3.1": {"categoria": "Masturbaci√≥n", "subcategoria": "Pr√°cticas de autocuidado",
            "descriptor": "Uso de la masturbaci√≥n como estrategia de bienestar.",
            "observable": "Relatos sobre relajaci√≥n, control del estr√©s, conciliaci√≥n del sue√±o, cuidado de la salud sexual."},
    "3.2": {"categoria": "Masturbaci√≥n", "subcategoria": "Placer y exploraci√≥n del cuerpo",
            "descriptor": "B√∫squeda de satisfacci√≥n personal y autoconocimiento.",
            "observable": "Narrativas sobre fantas√≠as, t√©cnicas usadas, experimentaci√≥n, referencias a placer f√≠sico."},
    "3.3": {"categoria": "Masturbaci√≥n", "subcategoria": "Relaci√≥n con la intimidad",
            "descriptor": "V√≠nculo entre la masturbaci√≥n y la privacidad del sujeto.",
            "observable": "Relatos de momentos en soledad, rituales √≠ntimos, ocultamiento frente a otros."},
    "3.4": {"categoria": "Masturbaci√≥n", "subcategoria": "Representaciones culturales",
            "descriptor": "Significados sociales y personales atribuidos a la masturbaci√≥n.",
            "observable": "Expresiones de libertad, verg√ºenza, culpa, normalizaci√≥n; uso de t√©rminos religiosos o morales."},
}

# Inicializar √∫ltimos eventos en session_state para mostrar racha
for key in [evento_a, evento_b]:
    if key not in st.session_state:
        evento = coleccion_eventos.find_one({"evento": key}, sort=[("fecha_hora", -1)])
        if evento:
            st.session_state[key] = evento["fecha_hora"].astimezone(colombia)


def mensaje_personalizado(nombre_evento):
    """Genera un mensaje claro y simple para el usuario basado en el patr√≥n hist√≥rico de horarios y d√≠as,
    considerando el d√≠a actual y horas habituales de reca√≠da."""
    eventos = list(coleccion_eventos.find({"evento": nombre_evento}))
    total = len(eventos)
    if total == 0:
        return "No hay registros a√∫n para evaluar riesgo.", "info"

    dias = [ev["fecha_hora"].astimezone(colombia).weekday() for ev in eventos]
    cuenta_dias = Counter(dias)
    horas = [ev["fecha_hora"].astimezone(colombia).hour for ev in eventos]

    hoy = datetime.now(colombia).weekday()
    ahora = datetime.now(colombia).hour

    propor_dia = cuenta_dias[hoy] / total if hoy in cuenta_dias else 0

    horas_ordenadas = sorted(horas)
    if len(horas_ordenadas) >= 10:
        idx_min = int(0.1 * len(horas_ordenadas))
        idx_max = int(0.9 * len(horas_ordenadas))
        hora_min = horas_ordenadas[idx_min]
        hora_max = horas_ordenadas[idx_max]
    else:
        hora_min = min(horas_ordenadas) if horas_ordenadas else 0
        hora_max = max(horas_ordenadas) if horas_ordenadas else 23

    if propor_dia > 0.2 and (hora_min <= ahora <= hora_max):
        mensaje = "Alerta: hoy y en esta hora, seg√∫n tu historial, la probabilidad de reca√≠da es alta. ¬°Cuidate mucho!"
        nivel = "error"
    elif propor_dia > 0.1:
        mensaje = "Precauci√≥n: hoy es un d√≠a con cierta probabilidad moderada de reca√≠da seg√∫n tu historial."
        nivel = "warning"
    else:
        mensaje = "Probabilidad baja de reca√≠da hoy, segu√≠ as√≠."
        nivel = "success"

    return mensaje, nivel


def eventos_dia_historial(nombre_evento):
    """Extrae y muestra las horas de los eventos que han ocurrido hist√≥ricamente en el mismo d√≠a de la semana que hoy.
    Esto ayuda a construir una l√≠nea temporal de eventos pasados para el usuario."""
    ahora = datetime.now(colombia)
    dia_objetivo = ahora.weekday()  # 0 lunes, 6 domingo

    # En MongoDB, d√≠a de la semana con $dayOfWeek: domingo=1, lunes=2... s√°bado=7
    dia_mongo = (dia_objetivo + 1) if dia_objetivo < 6 else 1  # Ajuste

    pipeline = [
        {
            "$addFields": {
                "dia_semana": {"$dayOfWeek": {"date": "$fecha_hora", "timezone": "America/Bogota"}}
            }
        },
        {
            "$match": {
                "evento": nombre_evento,
                "dia_semana": dia_mongo
            }
        },
        {
            "$sort": {"fecha_hora": 1}
        }
    ]

    eventos_similares = list(db.eventos.aggregate(pipeline))

    if not eventos_similares:
        return "No hay registros hist√≥ricos para este d√≠a de la semana.", "info"

    horas = [ev["fecha_hora"].astimezone(colombia).strftime("%H:%M") for ev in eventos_similares]
    mensaje = "Hist√≥ricamente tus eventos en este d√≠a ocurren a las horas: " + ", ".join(horas)

    return mensaje, "info"


def clasificar_reflexion_openai(texto_reflexion: str) -> str:
    """Consulta OpenAI para clasificar una reflexi√≥n dentro del sistema categorial."""
    prompt = f"""Sistema categorial para clasificar reflexiones:

1.1 Organizaci√≥n del tiempo
1.2 Relaciones sociales
1.3 Contextos de intimidad
1.4 Factores emocionales

2.1 Motivaciones
2.2 Pr√°cticas asociadas
2.3 Representaciones
2.4 Efectos en la trayectoria √≠ntima

3.1 Pr√°cticas de autocuidado
3.2 Placer y exploraci√≥n del cuerpo
3.3 Relaci√≥n con la intimidad
3.4 Representaciones culturales

Por favor indica el c√≥digo de la categor√≠a/subcategor√≠a que mejor describe esta reflexi√≥n:

Reflexi√≥n: \"\"\"{texto_reflexion}\"\"\"
Respuesta s√≥lo con el c√≥digo, ejemplo: 1.4
"""
    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0,
        max_tokens=5,
    )
    return response.choices[0].message.content.strip()


def guardar_reflexion(fecha_hora, emociones, reflexion):
    """Guarda una reflexi√≥n junto con emociones y categor√≠a asignada."""
    categoria_auto = clasificar_reflexion_openai(reflexion)
    doc = {
        "fecha_hora": fecha_hora,
        "emociones": [{"emoji": e.split()[0], "nombre": " ".join(e.split()[1:])} for e in emociones],
        "reflexion": reflexion.strip(),
        "categoria_categorial": categoria_auto if categoria_auto else ""
    }
    coleccion_reflexiones.insert_one(doc)
    return categoria_auto


def registrar_evento(nombre_evento, fecha_hora):
    """Registra un evento y actualiza el session_state para mostrar racha."""
    coleccion_eventos.insert_one({"evento": nombre_evento, "fecha_hora": fecha_hora})
    st.session_state[nombre_evento] = fecha_hora


def mostrar_racha(nombre_evento, emoji):
    """Muestra la racha con duraci√≥n desde el √∫ltimo evento y progreso hacia metas y r√©cords."""
    clave_estado = f"mostrar_racha_{nombre_evento}"
    if clave_estado not in st.session_state:
        st.session_state[clave_estado] = False
    mostrar = st.checkbox("Ver/ocultar racha", value=st.session_state[clave_estado], key=f"check_{nombre_evento}")
    st.session_state[clave_estado] = mostrar

    st.markdown("### ‚è±Ô∏è Racha")

    if nombre_evento in st.session_state:
        ultimo = st.session_state[nombre_evento]
        ahora = datetime.now(colombia)
        delta = ahora - ultimo
        detalle = relativedelta(ahora, ultimo)
        minutos = int(delta.total_seconds() // 60)
        tiempo = f"{detalle.years}a {detalle.months}m {detalle.days}d {detalle.hours}h {detalle.minutes}m {detalle.seconds}s"

        dias_semana_es = {
            "Monday": "Lunes",
            "Tuesday": "Martes",
            "Wednesday": "Mi√©rcoles",
            "Thursday": "Jueves",
            "Friday": "Viernes",
            "Saturday": "S√°bado",
            "Sunday": "Domingo"
        }
        dia = ultimo.strftime('%A')
        dia_es = dias_semana_es.get(dia, dia)

        if mostrar:
            st.metric("Duraci√≥n", f"{minutos:,} min", tiempo)
            st.caption(f"üî¥ √öltima reca√≠da: {dia_es} {ultimo.strftime('%d-%m-%y %H:%M:%S')}")

            if nombre_evento == evento_a:
                registros = list(coleccion_eventos.find({"evento": nombre_evento}).sort("fecha_hora", -1))
                record = max([(registros[i - 1]["fecha_hora"] - registros[i]["fecha_hora"])
                              for i in range(1, len(registros))], default=delta)
                total_dias = record.days
                horas = record.seconds // 3600
                minutos_rec = (record.seconds % 3600) // 60
                segundos = record.seconds % 60
                record_str = f"{total_dias} d√≠as, {horas:02d}:{minutos_rec:02d}:{segundos:02d}"

                umbral = timedelta(days=3)
                meta_5 = timedelta(days=5)
                meta_21 = timedelta(days=21)

                if delta > umbral:
                    st.success("‚úÖ Superaste la zona cr√≠tica de las 72 horas.")
                if delta > meta_5:
                    st.success("üå± ¬°Sosten√©s 5 d√≠as! Se est√° instalando un nuevo h√°bito.")
                if delta > meta_21:
                    st.success("üèóÔ∏è 21 d√≠as: ya creaste una estructura s√≥lida.")

                if delta < umbral:
                    meta_actual = umbral
                    label_meta = "zona cr√≠tica (3 d√≠as)"
                elif delta < meta_5:
                    meta_actual = meta_5
                    label_meta = "meta base (5 d√≠as)"
                elif delta < meta_21:
                    meta_actual = meta_21
                    label_meta = "meta s√≥lida (21 d√≠as)"
                elif delta < record:
                    meta_actual = record
                    label_meta = "tu r√©cord"
                else:
                    meta_actual = delta
                    label_meta = "¬°Nuevo r√©cord!"

                progreso_visual = min(delta.total_seconds() / meta_actual.total_seconds(), 1.0)
                porcentaje_record = (delta.total_seconds() / record.total_seconds()) * 100

                st.markdown(f"üèÖ **R√©cord personal:** `{record_str}`")
                st.markdown(f"üìä **Progreso hacia {label_meta}:** `{progreso_visual * 100:.1f}%`")
                st.progress(progreso_visual)
                st.markdown(f"üìà **Progreso frente al r√©cord:** `{porcentaje_record:.1f}%`")

        else:
            st.metric("Duraci√≥n", "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢ min", "‚Ä¢‚Ä¢a ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢d ‚Ä¢‚Ä¢h ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢s")
            st.caption("üîí Informaci√≥n sensible oculta. Activ√° la casilla para visualizar.")
    else:
        st.metric("Duraci√≥n", "0 min")
        st.caption("0a 0m 0d 0h 0m 0s")


def obtener_registros(nombre_evento):
    """Obtiene el historial de eventos y calcula intervalos entre ellos para mostrar."""
    letras_dia = {0: "L", 1: "M", 2: "X", 3: "J", 4: "V", 5: "S", 6: "D"}
    eventos = list(coleccion_eventos.find({"evento": nombre_evento}).sort("fecha_hora", -1))
    filas = []
    for i, e in enumerate(eventos):
        fecha = e["fecha_hora"].astimezone(colombia)
        anterior = eventos[i + 1]["fecha_hora"].astimezone(colombia) if i + 1 < len(eventos) else None
        diferencia = ""
        if anterior:
            detalle = relativedelta(fecha, anterior)
            partes = []
            if detalle.years:
                partes.append(f"{detalle.years}a")
            if detalle.months:
                partes.append(f"{detalle.months}m")
            if detalle.days:
                partes.append(f"{detalle.days}d")
            if detalle.hours:
                partes.append(f"{detalle.hours}h")
            if detalle.minutes:
                partes.append(f"{detalle.minutes}m")
            diferencia = " ".join(partes)
        dia_semana = letras_dia[fecha.weekday()]
        filas.append({
            "D√≠a": dia_semana,
            "Fecha": fecha.strftime("%d-%m-%y"),
            "Hora": fecha.strftime("%H:%M"),
            "Sin reca√≠da": diferencia
        })
    return pd.DataFrame(filas)


def obtener_reflexiones():
    """Obtiene y estructura la lista de reflexiones para mostrar en historial."""
    docs = list(coleccion_reflexiones.find({}).sort("fecha_hora", -1))
    rows = []
    for d in docs:
        fecha = d["fecha_hora"].astimezone(colombia)
        emojis = " ".join([e["emoji"] for e in d.get("emociones", [])])
        emociones = ", ".join([e["nombre"] for e in d.get("emociones", [])])
        codigo_cat = d.get("categoria_categorial", "")
        info_cat = sistema_categorial.get(codigo_cat, {
            "categoria": "Sin categor√≠a",
            "subcategoria": "",
            "descriptor": "",
            "observable": ""
        })
        rows.append({
            "Fecha": fecha.strftime("%d-%m-%y"),
            "Hora": fecha.strftime("%H:%M"),
            "Emojis": emojis,
            "Emociones": emociones,
            "Categor√≠a": info_cat["categoria"],
            "Subcategor√≠a": info_cat["subcategoria"],
            "Descriptor": info_cat.get("descriptor", ""),
            "Observable": info_cat.get("observable", ""),
            "Reflexi√≥n": d.get("reflexion", "")
        })
    return pd.DataFrame(rows)


def mostrar_tabla_eventos(nombre_evento):
    """Muestra registros con opci√≥n de ocultar datos y mostrar recuento total."""
    st.subheader(f"üìç Registros")
    df = obtener_registros(nombre_evento)
    total_registros = len(df)

    def ocultar_numero_con_punticos(numero):
        return "‚Ä¢" * len(str(numero))

    mostrar = st.checkbox("Ver/Ocultar registros", value=False, key=f"mostrar_{nombre_evento}")

    total_mostrar = str(total_registros) if mostrar else ocultar_numero_con_punticos(total_registros)
    st.markdown(f"**Total de registros:** {total_mostrar}")

    if mostrar:
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        df_oculto = pd.DataFrame({
            "D√≠a": ["‚Ä¢"] * total_registros,
            "Fecha": ["‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-‚Ä¢‚Ä¢"] * total_registros,
            "Hora": ["‚Ä¢‚Ä¢:‚Ä¢‚Ä¢"] * total_registros,
            "Sin reca√≠da": ["‚Ä¢‚Ä¢a ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢d ‚Ä¢‚Ä¢h ‚Ä¢‚Ä¢m"] * total_registros
        })
        st.dataframe(df_oculto, use_container_width=True, hide_index=True)
        st.caption("üîí Registros ocultos. Activ√° la casilla para visualizar.")


# Interfaz Principal
st.title("Reinicia")

seleccion = st.selectbox("Seleccion√° qu√© registrar o consultar:", list(eventos.keys()))
opcion = eventos[seleccion]

# Limpiar estado si no es reflexi√≥n para evitar conflictos
if opcion != "reflexion":
    for key in ["texto_reflexion", "emociones_reflexion", "reset_reflexion"]:
        if key in st.session_state:
            del st.session_state[key]

# M√≥dulo registrar eventos
if opcion in [evento_a, evento_b]:
    st.header(f"üìç Registro de evento")
    fecha_hora_evento = datetime.now(colombia)

    # Mostrar mensaje de riesgo personalizado
    mensaje, nivel = mensaje_personalizado(opcion)
    if nivel == "error":
        st.error(mensaje)
    elif nivel == "warning":
        st.warning(mensaje)
    else:
        st.success(mensaje)

    # Mostrar l√≠nea temporal de eventos hist√≥ricos para d√≠as como hoy
    tiempo_mensaje, tiempo_nivel = eventos_dia_historial(opcion)
    st.info(tiempo_mensaje)

    # Bot√≥n para registrar nuevo evento
    if st.button("‚ò†Ô∏è ¬øRegistrar?"):
        registrar_evento(opcion, fecha_hora_evento)
        st.success(f"Evento '{seleccion}' registrado a las {fecha_hora_evento.strftime('%H:%M:%S')}")
        st.rerun()

    mostrar_racha(opcion, seleccion.split()[0])

# M√≥dulo reflexiones
elif opcion == "reflexion":
    st.header("üß† Registrar reflexi√≥n")

    if st.session_state.get("reset_reflexion", False):
        st.session_state["texto_reflexion"] = ""
        st.session_state["emociones_reflexion"] = []
        st.session_state["reset_reflexion"] = False
        st.rerun()

    ultima = coleccion_reflexiones.find_one({}, sort=[("fecha_hora", -1)])
    if ultima:
        fecha = ultima["fecha_hora"].astimezone(colombia)
        st.caption(f"üìå √öltima registrada: {fecha.strftime('%d-%m-%y %H:%M:%S')}")

    fecha_hora_reflexion = datetime.now(colombia)

    emociones_opciones = [
        "üò∞ Ansioso", "üò° Irritado / Rabia contenida", "üí™ Firme / Decidido",
        "üòå Aliviado / Tranquilo", "üòì Culpable", "ü•± Ap√°tico / Cansado", "üòî Triste"
    ]

    emociones = st.multiselect(
        "¬øC√≥mo te sent√≠as?",
        emociones_opciones,
        key="emociones_reflexion",
        placeholder="Seleccion√° una o varias emociones"
    )
    texto_reflexion = st.text_area("¬øQuer√©s dejar algo escrito?", height=150, key="texto_reflexion")

    puede_guardar = texto_reflexion.strip() or emociones

    if puede_guardar:
        if st.button("üìù Guardar reflexi√≥n"):
            categoria_asignada = guardar_reflexion(fecha_hora_reflexion, emociones, texto_reflexion)
            st.success(f"Reflexi√≥n guardada con categor√≠a: {categoria_asignada}")
            st.session_state["reset_reflexion"] = True
            st.rerun()

# M√≥dulo historial
elif opcion == "historial":
    st.header("üìë Historial completo")
    tabs = st.tabs(["üß† Reflexiones", "‚úäüèΩ", "üí∏"])

    with tabs[0]:
        st.subheader("üìç Historial de reflexiones")
        df_r = obtener_reflexiones()
        for i, row in df_r.iterrows():
            with st.expander(f"{row['Fecha']} {row['Emojis']} {row['Hora']}"):
                st.write(row['Reflexi√≥n'])
                st.markdown("---")
                st.write(f"**Estados de √°nimo:** {row['Emociones']}")
                st.markdown(f"**Categor√≠a:** {row['Categor√≠a']}")
                st.markdown(f"**Subcategor√≠a:** {row['Subcategor√≠a']}")
                if row['Descriptor']:
                    st.markdown(f"**Descriptor:** {row['Descriptor']}")
                if row['Observable']:
                    st.markdown(f"**Observable:** {row['Observable']}")

    with tabs[1]:
        mostrar_tabla_eventos(evento_a)

    with tabs[2]:
        mostrar_tabla_eventos(evento_b)
