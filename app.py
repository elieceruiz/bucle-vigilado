import streamlit as st
from datetime import datetime, timedelta
from pymongo import MongoClient
import pytz
import pandas as pd
from dateutil.relativedelta import relativedelta
from streamlit_autorefresh import st_autorefresh
from openai import OpenAI

# -------------------------
# Configuraci√≥n inicial
# -------------------------
st.set_page_config(page_title="Reinicia", layout="centered")
colombia = pytz.timezone("America/Bogota")

# D√≠as
dias_semana_es = {
    "Monday": "Lunes", "Tuesday": "Martes", "Wednesday": "Mi√©rcoles",
    "Thursday": "Jueves", "Friday": "Viernes", "Saturday": "S√°bado", "Sunday": "Domingo"
}
dias_semana_3letras = {0: "Lun", 1: "Mar", 2: "Mi√©", 3: "Jue", 4: "Vie", 5: "S√°b", 6: "Dom"}

# -------------------------
# Conexi√≥n a MongoDB y OpenAI
# -------------------------
client = MongoClient(st.secrets["mongo_uri"])
db = client["registro_bucle"]
coleccion_eventos = db["eventos"]
coleccion_reflexiones = db["reflexiones"]
coleccion_hitos = db["hitos"]
coleccion_visual = db["log_visual"]

openai_client = OpenAI(api_key=st.secrets["openai_api_key"])

# -------------------------
# Constantes y mapeos
# -------------------------
evento_a = "La Iniciativa Aquella"
evento_b = "La Iniciativa de Pago"
eventos = {
    "üß† Reflexi√≥n": "reflexion",
    "üìë Historial": "historial",
    "‚úäüèΩ": evento_a,
    "üí∏": evento_b,
}

sistema_categorial = {
    "1.1": {"categoria": "Din√°micas cotidianas", "subcategoria": "Organizaci√≥n del tiempo",
            "descriptor": "Manejo de rutinas y distribuci√≥n del d√≠a",
            "observable": "Relatos sobre horarios de trabajo, estudio, momentos de ocio, tiempo dedicado a la intimidad."},
    "1.2": {"categoria": "Din√°micas cotidianas", "subcategoria": "Relaciones sociales",
            "descriptor": "Interacciones que influyen en la vida √≠ntima.",
            "observable": "Narraciones sobre pareja, amigos, familia; menciones de aprobaci√≥n o desaprobaci√≥n social."},
    "1.3": {"categoria": "Din√°micas cotidianas", "subcategoria": "Contextos de intimidad",
            "descriptor": "Espacios f√≠sicos y virtuales donde se desarrollan las pr√°cticas.",
            "observable": "Lugares mencionados (casa, moteles, internet, calle), dispositivos usados, condiciones de privacidad."},
    "1.4": {"categoria": "Din√°micas cotidianas", "subcategoria": "Factores emocionales",
            "descriptor": "Estados afectivos vinculados al ejercicio de la sexualidad.",
            "observable": "Expresiones de soledad, ansiedad, deseo, satisfacci√≥n o culpa."},
    "2.1": {"categoria": "Consumo de sexo pago", "subcategoria": "Motivaciones",
            "descriptor": "Razones personales y sociales para pagar por sexo.",
            "observable": "Relatos de b√∫squeda de placer, compa√±√≠a, evasi√≥n, curiosidad, necesidad de afecto."},
    "2.2": {"categoria": "Consumo de sexo pago", "subcategoria": "Pr√°cticas asociadas",
            "descriptor": "Formas de acceder y realizar el consumo.",
            "observable": "Lugares (bares, calles, plataformas digitales), frecuencia, monto pagado, modalidades de encuentro."},
    "2.3": {"categoria": "Consumo de sexo pago", "subcategoria": "Representaciones",
            "descriptor": "Significados culturales y personales del sexo pago.",
            "observable": "Uso de t√©rminos como tab√∫, normal, peligroso, necesario, transgresi√≥n; narrativas de estigma o aceptaci√≥n."},
    "2.4": {"categoria": "Consumo de sexo pago", "subcategoria": "Efectos en la trayectoria √≠ntima",
            "descriptor": "Impacto en la experiencia personal y en la memoria √≠ntima.",
            "observable": "Relatos de aprendizaje, arrepentimiento, culpa, gratificaci√≥n, comparaci√≥n con otras pr√°cticas sexuales."},
    "3.1": {"categoria": "Masturbaci√≥n", "subcategoria": "Pr√°cticas de autocuidado",
            "descriptor": "Uso de la masturbaci√≥n como estrategia de bienestar.",
            "observable": "Relatos sobre relajaci√≥n, control del estr√©s, conciliaci√≥n del sue√±o, cuidado de la salud sexual."},
    "3.2": {"categoria": "Masturbaci√≥n", "subcategoria": "Placer y exploraci√≥n del cuerpo",
            "descriptor": "B√∫squeda de satisfacci√≥n personal y autoconocimiento.",
            "observable": "Narrativas sobre fantas√≠as, t√©cnicas usadas, experimentaci√≥n, referencias a placer f√≠sico."},
    "3.3": {"categoria": "Masturbaci√≥n", "subcategoria": "Relaci√≥n con la intimidad",
            "descriptor": "V√≠nculo entre la masturbaci√≥n y la privacidad del sujeto.",
            "observable": "Relatos de momentos en soledad, rituales √≠ntimos, ocultamiento frente a otros."},
    "3.4": {"categoria": "Masturbaci√≥n", "subcategoria": "Representaciones culturales",
            "descriptor": "Significados sociales y personales atribuidos a la masturbaci√≥n.",
            "observable": "Expresiones de libertad, verg√ºenza, culpa, normalizaci√≥n; uso de t√©rminos religiosos o morales."},
}

# -------------------------
# Inicializar session_state con claves necesarias
# -------------------------
defaults = {
    "reset_reflexion": False,
    evento_a: None,
    evento_b: None,
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# cargar √∫ltima vez de eventos principales en session_state (si existen)
for key in [evento_a, evento_b]:
    if st.session_state.get(key) is None:
        evento = coleccion_eventos.find_one({"evento": key}, sort=[("fecha_hora", -1)])
        if evento:
            st.session_state[key] = evento["fecha_hora"].astimezone(colombia)

# -------------------------
# Funciones OpenAI / DB
# -------------------------
def clasificar_reflexion_openai(texto_reflexion: str) -> str:
    prompt = f"""Sistema categorial para clasificar reflexiones:

1.1 Organizaci√≥n del tiempo
1.2 Relaciones sociales
1.3 Contextos de intimidad
1.4 Factores emocionales

2.1 Motivaciones
2.2 Pr√°cticas asociadas
2.3 Representaciones
2.4 Efectos en la trayectoria √≠ntima

3.1 Pr√°cticas de autocuidado
3.2 Placer y exploraci√≥n del cuerpo
3.3 Relaci√≥n con la intimidad
3.4 Representaciones culturales

Por favor indica el c√≥digo de la categor√≠a/subcategor√≠a que mejor describe esta reflexi√≥n:

Reflexi√≥n: \"\"\"{texto_reflexion}\"\"\"
Respuesta s√≥lo con el c√≥digo, ejemplo: 1.4
"""
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": prompt}],
            temperature=0,
            max_tokens=5,
        )
        return response.choices[0].message.content.strip()
    except Exception:
        # no queremos que falle la app si OpenAI falla
        st.warning("Clasificaci√≥n autom√°tica no disponible (OpenAI). Se guardar√° sin categor√≠a.")
        return ""

def guardar_reflexion(fecha_hora, emociones, reflexion):
    categoria_auto = clasificar_reflexion_openai(reflexion)
    doc = {
        "fecha_hora": fecha_hora,
        "emociones": [{"emoji": e.split()[0], "nombre": " ".join(e.split()[1:])} for e in emociones],
        "reflexion": reflexion.strip(),
        "categoria_categorial": categoria_auto if categoria_auto else ""
    }
    coleccion_reflexiones.insert_one(doc)
    return categoria_auto

def registrar_evento(nombre_evento, fecha_hora):
    coleccion_eventos.insert_one({"evento": nombre_evento, "fecha_hora": fecha_hora})
    st.session_state[nombre_evento] = fecha_hora
    # actualizar UI despu√©s del insert
    st.rerun()

# -------------------------
# Lecturas cacheadas
# -------------------------
@st.cache_data(ttl=5)
def obtener_registros(nombre_evento):
    eventos = list(coleccion_eventos.find({"evento": nombre_evento}).sort("fecha_hora", -1))
    filas = []
    for i, e in enumerate(eventos):
        fecha = e["fecha_hora"].astimezone(colombia)
        anterior = eventos[i + 1]["fecha_hora"].astimezone(colombia) if i + 1 < len(eventos) else None
        diferencia = ""
        if anterior:
            detalle = relativedelta(fecha, anterior)
            partes = []
            if detalle.years: partes.append(f"{detalle.years}a")
            if detalle.months: partes.append(f"{detalle.months}m")
            if detalle.days: partes.append(f"{detalle.days}d")
            if detalle.hours: partes.append(f"{detalle.hours}h")
            if detalle.minutes: partes.append(f"{detalle.minutes}m")
            diferencia = " ".join(partes)
        dia_semana = dias_semana_3letras[fecha.weekday()]
        filas.append({
            "D√≠a": dia_semana,
            "Fecha": fecha.strftime("%d-%m-%y"),
            "Hora": fecha.strftime("%H:%M"),
            "Sin reca√≠da": diferencia
        })
    return pd.DataFrame(filas)

@st.cache_data(ttl=5)
def obtener_reflexiones():
    docs = list(coleccion_reflexiones.find({}).sort("fecha_hora", -1))
    rows = []
    for d in docs:
        fecha = d["fecha_hora"].astimezone(colombia)
        emojis = " ".join([e["emoji"] for e in d.get("emociones", [])])
        emociones = ", ".join([e["nombre"] for e in d.get("emociones", [])])
        codigo_cat = d.get("categoria_categorial", "")
        info_cat = sistema_categorial.get(codigo_cat, {
            "categoria": "Sin categor√≠a",
            "subcategoria": "",
            "descriptor": "",
            "observable": ""
        })
        rows.append({
            "Fecha": fecha.strftime("%d-%m-%y"),
            "Hora": fecha.strftime("%H:%M"),
            "Emojis": emojis,
            "Emociones": emociones,
            "Categor√≠a": info_cat["categoria"],
            "Subcategor√≠a": info_cat["subcategoria"],
            "Descriptor": info_cat.get("descriptor", ""),
            "Observable": info_cat.get("observable", ""),
            "Reflexi√≥n": d.get("reflexion", "")
        })
    return pd.DataFrame(rows)

# -------------------------
# Utilidades visuales y componentes
# -------------------------
def ocultar_numero_con_punticos(numero):
    return "‚Ä¢" * len(str(numero))

def mostrar_tabla_eventos(nombre_evento):
    with st.spinner("Cargando registros..."):
        df = obtener_registros(nombre_evento)
    total_registros = len(df)
    mostrar = st.checkbox("Ver/Ocultar registros", value=False, key=f"mostrar_{nombre_evento}")
    total_mostrar = str(total_registros) if mostrar else ocultar_numero_con_punticos(total_registros)
    st.markdown(f"**Total de registros:** {total_mostrar}")

    if mostrar:
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        df_oculto = pd.DataFrame({
            "D√≠a": ["‚Ä¢‚Ä¢‚Ä¢"] * total_registros,
            "Fecha": ["‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-‚Ä¢‚Ä¢"] * total_registros,
            "Hora": ["‚Ä¢‚Ä¢:‚Ä¢‚Ä¢"] * total_registros,
            "Sin reca√≠da": ["‚Ä¢‚Ä¢a ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢d ‚Ä¢‚Ä¢h ‚Ä¢‚Ä¢m"] * total_registros
        })
        st.dataframe(df_oculto, use_container_width=True, hide_index=True)
        st.caption("üîí Registros ocultos. Activ√° la casilla para visualizar.")

def mostrar_reflexiones_en_historial():
    with st.spinner("Cargando reflexiones..."):
        df_r = obtener_reflexiones()
    if df_r.empty:
        st.write("No hay reflexiones a√∫n.")
        return
    for i, row in df_r.iterrows():
        with st.expander(f"{row['Fecha']} {row['Emojis']} {row['Hora']}"):
            st.write(row['Reflexi√≥n'])
            st.markdown("---")
            st.write(f"**Estados de √°nimo:** {row['Emociones']}")
            st.markdown(f"**Categor√≠a:** {row['Categor√≠a']}")
            st.markdown(f"**Subcategor√≠a:** {row['Subcategor√≠a']}")
            if row['Descriptor']:
                st.markdown(f"**Descriptor:** {row['Descriptor']}")
            if row['Observable']:
                st.markdown(f"**Observable:** {row['Observable']}")

def mostrar_racha(nombre_evento, emoji):
    clave_estado = f"mostrar_racha_{nombre_evento}"
    if clave_estado not in st.session_state:
        st.session_state[clave_estado] = False
    mostrar = st.checkbox("Ver/ocultar racha", key=f"check_{nombre_evento}")
    st.markdown("### ‚è±Ô∏è Racha")

    if nombre_evento not in st.session_state:
        st.metric("Duraci√≥n", "0 min")
        st.caption("0a 0m 0d 0h 0m 0s")
        return

    if mostrar:
        st_autorefresh(interval=1000, limit=None, key=f"autorefresh_{nombre_evento}")

    ultimo = st.session_state[nombre_evento]
    ahora = datetime.now(colombia)
    delta = ahora - ultimo
    detalle = relativedelta(ahora, ultimo)
    minutos = int(delta.total_seconds() // 60)
    tiempo = f"{detalle.years}a {detalle.months}m {detalle.days}d {detalle.hours}h {detalle.minutes}m {detalle.seconds}s"
    dia = ultimo.strftime('%A')
    dia_es = dias_semana_es.get(dia, dia)

    if mostrar:
        st.metric("Duraci√≥n", f"{minutos:,} min", tiempo)
        st.caption(f"üî¥ √öltima reca√≠da: {dia_es} {ultimo.strftime('%d-%m-%y %H:%M:%S')}")

        # c√°lculo de r√©cord personal (orden ascendente)
        if nombre_evento == evento_a:
            registros = list(coleccion_eventos.find({"evento": nombre_evento}).sort("fecha_hora", 1))
            if len(registros) > 1:
                diffs = []
                for i in range(1, len(registros)):
                    diff = registros[i]["fecha_hora"] - registros[i - 1]["fecha_hora"]
                    if diff.total_seconds() > 0:
                        diffs.append(diff)
                record = max(diffs) if diffs else delta
            else:
                record = delta

            total_dias = record.days
            horas = record.seconds // 3600
            minutos_rec = (record.seconds % 3600) // 60
            segundos = record.seconds % 60
            record_str = f"{total_dias} d√≠as, {horas:02d}:{minutos_rec:02d}:{segundos:02d}"

            umbral = timedelta(days=3)
            meta_5 = timedelta(days=5)
            meta_21 = timedelta(days=21)

            if delta > umbral:
                st.success("‚úÖ Superaste la zona cr√≠tica de las 72 horas.")
            if delta > meta_5:
                st.success("üå± ¬°Sosten√©s 5 d√≠as! Se est√° instalando un nuevo h√°bito.")
            if delta > meta_21:
                st.success("üèóÔ∏è 21 d√≠as: ya creaste una estructura s√≥lida.")

            if delta < umbral:
                meta_actual = umbral
                label_meta = "zona cr√≠tica (3 d√≠as)"
            elif delta < meta_5:
                meta_actual = meta_5
                label_meta = "meta base (5 d√≠as)"
            elif delta < meta_21:
                meta_actual = meta_21
                label_meta = "meta s√≥lida (21 d√≠as)"
            elif delta < record:
                meta_actual = record
                label_meta = "tu r√©cord"
            else:
                meta_actual = delta
                label_meta = "¬°Nuevo r√©cord!"

            progreso_visual = min(delta.total_seconds() / meta_actual.total_seconds(), 1.0)
            porcentaje_record = (delta.total_seconds() / record.total_seconds()) * 100 if record.total_seconds() > 0 else 0

            st.markdown(f"üèÖ **R√©cord personal:** `{record_str}`")
            st.markdown(f"üìä **Progreso hacia {label_meta}:** `{progreso_visual * 100:.1f}%`")
            st.progress(progreso_visual)
            st.markdown(f"üìà **Progreso frente al r√©cord:** `{porcentaje_record:.1f}%`")

    else:
        st.metric("Duraci√≥n", "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢ min", "‚Ä¢‚Ä¢a ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢d ‚Ä¢‚Ä¢h ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢s")
        st.caption("üîí Informaci√≥n sensible oculta. Activ√° la casilla para visualizar.")

# -------------------------
# INTERFAZ PRINCIPAL
# -------------------------
st.title("Reinicia")

seleccion = st.selectbox("Seleccion√° qu√© registrar o consultar:", list(eventos.keys()))
opcion = eventos[seleccion]

# Bloque: d√≠as iguales al d√≠a actual desde √∫ltima reca√≠da
if opcion in [evento_a, evento_b]:
    df_registros = obtener_registros(opcion)
    if not df_registros.empty:
        fecha_ultimo_str = df_registros.iloc[0]["Fecha"]
        fecha_ultimo = datetime.strptime(fecha_ultimo_str, "%d-%m-%y").date()
        hoy = datetime.now(colombia).date()

        delta_dias = (hoy - fecha_ultimo).days
        semanas_completas = delta_dias // 7
        contar = semanas_completas

        if contar == 0:
            mensaje = f"El evento ocurri√≥ recientemente, por lo que a√∫n no hay d√≠as completos iguales al d√≠a actual sin reca√≠das."
        elif contar == 1:
            mensaje = f"Si terminas hoy, ser√≠a tu primer  {dias_semana_es[hoy.strftime('%A')]} sin evento."
        else:
            mensaje = f"Llev√°s {contar} {dias_semana_es[hoy.strftime('%A')]} seguidos sin evento."
    else:
        mensaje = f"No hay registros previos. Hoy puede ser el primer d√≠a sin evento."
    st.info(mensaje)

# Validaciones y alertas para hoy
if opcion in [evento_a, evento_b]:
    dia_semana_hoy = dias_semana_es[datetime.now(colombia).strftime('%A')]
    df_registros = obtener_registros(opcion)
    df_dia = df_registros[df_registros["D√≠a"] == dias_semana_3letras[datetime.now(colombia).weekday()]]
    recaidas_hoy = len(df_dia)

    if st.session_state.get(f"check_{opcion}", False):
        if recaidas_hoy == 1:
            hora_unica = df_dia.iloc[0]["Hora"]
            st.error(f"‚ùó Atenci√≥n: hay 1 reca√≠da registrada para un d√≠a como hoy {dia_semana_hoy} a las {hora_unica}.")
        elif recaidas_hoy > 1:
            hora_min = df_dia["Hora"].min()
            hora_max = df_dia["Hora"].max()
            st.error(f"‚ùó Atenci√≥n: hay {recaidas_hoy} reca√≠das registradas para un d√≠a como hoy {dia_semana_hoy} entre las {hora_min} y las {hora_max}.")
        else:
            st.success(f"Hoy es: {dia_semana_hoy}. Sin registros para mostrar. Congrats!!! ")

# Limpieza estado sesi√≥n temporal para reflexiones
if opcion != "reflexion":
    for key in ["texto_reflexion", "emociones_reflexion", "reset_reflexion"]:
        if key in st.session_state:
            st.session_state.pop(key)

# M√≥dulo registrar evento y cron√≥metro
if opcion in [evento_a, evento_b]:
    fecha_hora_evento = datetime.now(colombia)
    if st.button("‚ò†Ô∏è ¬øRegistrar?"):
        registrar_evento(opcion, fecha_hora_evento)
    mostrar_racha(opcion, seleccion.split()[0])

# M√≥dulo reflexiones con clasificaci√≥n autom√°tica
elif opcion == "reflexion":
    if st.session_state.get("reset_reflexion", False):
        st.session_state["texto_reflexion"] = ""
        st.session_state["emociones_reflexion"] = []
        st.session_state["reset_reflexion"] = False
        st.rerun()

    ultima = coleccion_reflexiones.find_one({}, sort=[("fecha_hora", -1)])
    if ultima:
        fecha = ultima["fecha_hora"].astimezone(colombia)
        st.caption(f"üìå √öltima registrada: {fecha.strftime('%d-%m-%y %H:%M:%S')}")

    fecha_hora_reflexion = datetime.now(colombia)
    emociones_opciones = [
        "üò∞ Ansioso", "üò° Irritado / Rabia contenida", "üí™ Firme / Decidido",
        "üòå Aliviado / Tranquilo", "üòì Culpable", "ü•± Ap√°tico / Cansado", "üòî Triste"
    ]

    emociones = st.multiselect(
        "¬øC√≥mo te sent√≠as?",
        emociones_opciones,
        key="emociones_reflexion",
        placeholder="Seleccion√° una o varias emociones"
    )
    texto_reflexion = st.text_area("¬øQuer√©s dejar algo escrito?", height=150, key="texto_reflexion")

    puede_guardar = texto_reflexion.strip() or emociones
    if puede_guardar:
        if st.button("üìù Guardar reflexi√≥n"):
            categoria_asignada = guardar_reflexion(fecha_hora_reflexion, emociones, texto_reflexion)
            st.success(f"Reflexi√≥n guardada con categor√≠a: {categoria_asignada}")
            st.session_state["reset_reflexion"] = True
            st.rerun()

# M√≥dulo historial completo con tabs
elif opcion == "historial":
    tabs = st.tabs(["üß†", "‚úäüèΩ", "üí∏"])
    with tabs[0]:
        mostrar_reflexiones_en_historial()
    with tabs[1]:
        mostrar_tabla_eventos(evento_a)
    with tabs[2]:
        mostrar_tabla_eventos(evento_b)