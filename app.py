import streamlit as st
from datetime import datetime, timedelta
from pymongo import MongoClient
import pytz
import pandas as pd
from dateutil.relativedelta import relativedelta
from streamlit_autorefresh import st_autorefresh
from openai import OpenAI

# Configuraci√≥n
st.set_page_config(page_title="Reinicia", layout="centered")
colombia = pytz.timezone("America/Bogota")

client = MongoClient(st.secrets["mongo_uri"])
db = client["registro_bucle"]
coleccion_eventos = db["eventos"]
coleccion_reflexiones = db["reflexiones"]
coleccion_hitos = db["hitos"]
coleccion_visual = db["log_visual"]

openai_client = OpenAI(api_key=st.secrets["openai_api_key"])

evento_a = "La Iniciativa Aquella"
evento_b = "La Iniciativa de Pago"
eventos = {
    "üß† Reflexi√≥n": "reflexion",
    "üìë Historial completo": "historial",
    "‚úäüèΩ": evento_a,
    "üí∏": evento_b,
}

# Sistema categorial extendido con descriptores y observables
sistema_categorial = {
    "1.1": {
        "categoria": "Din√°micas cotidianas",
        "subcategoria": "Organizaci√≥n del tiempo",
        "descriptor": "Manejo de rutinas y distribuci√≥n del d√≠a",
        "observable": "Relatos sobre horarios de trabajo, estudio, momentos de ocio, tiempo dedicado a la intimidad."
    },
    "1.2": {
        "categoria": "Din√°micas cotidianas",
        "subcategoria": "Relaciones sociales",
        "descriptor": "Interacciones que influyen en la vida √≠ntima.",
        "observable": "Narraciones sobre pareja, amigos, familia; menciones de aprobaci√≥n o desaprobaci√≥n social."
    },
    "1.3": {
        "categoria": "Din√°micas cotidianas",
        "subcategoria": "Contextos de intimidad",
        "descriptor": "Espacios f√≠sicos y virtuales donde se desarrollan las pr√°cticas.",
        "observable": "Lugares mencionados (casa, moteles, internet, calle), dispositivos usados, condiciones de privacidad."
    },
    "1.4": {
        "categoria": "Din√°micas cotidianas",
        "subcategoria": "Factores emocionales",
        "descriptor": "Estados afectivos vinculados al ejercicio de la sexualidad.",
        "observable": "Expresiones de soledad, ansiedad, deseo, satisfacci√≥n o culpa."
    },
    "2.1": {
        "categoria": "Consumo de sexo pago",
        "subcategoria": "Motivaciones",
        "descriptor": "Razones personales y sociales para pagar por sexo.",
        "observable": "Relatos de b√∫squeda de placer, compa√±√≠a, evasi√≥n, curiosidad, necesidad de afecto."
    },
    "2.2": {
        "categoria": "Consumo de sexo pago",
        "subcategoria": "Pr√°cticas asociadas",
        "descriptor": "Formas de acceder y realizar el consumo.",
        "observable": "Lugares (bares, calles, plataformas digitales), frecuencia, monto pagado, modalidades de encuentro."
    },
    "2.3": {
        "categoria": "Consumo de sexo pago",
        "subcategoria": "Representaciones",
        "descriptor": "Significados culturales y personales del sexo pago.",
        "observable": "Uso de t√©rminos como tab√∫, normal, peligroso, necesario, transgresi√≥n; narrativas de estigma o aceptaci√≥n."
    },
    "2.4": {
        "categoria": "Consumo de sexo pago",
        "subcategoria": "Efectos en la trayectoria √≠ntima",
        "descriptor": "Impacto en la experiencia personal y en la memoria √≠ntima.",
        "observable": "Relatos de aprendizaje, arrepentimiento, culpa, gratificaci√≥n, comparaci√≥n con otras pr√°cticas sexuales."
    },
    "3.1": {
        "categoria": "Masturbaci√≥n",
        "subcategoria": "Pr√°cticas de autocuidado",
        "descriptor": "Uso de la masturbaci√≥n como estrategia de bienestar.",
        "observable": "Relatos sobre relajaci√≥n, control del estr√©s, conciliaci√≥n del sue√±o, cuidado de la salud sexual."
    },
    "3.2": {
        "categoria": "Masturbaci√≥n",
        "subcategoria": "Placer y exploraci√≥n del cuerpo",
        "descriptor": "B√∫squeda de satisfacci√≥n personal y autoconocimiento.",
        "observable": "Narrativas sobre fantas√≠as, t√©cnicas usadas, experimentaci√≥n, referencias a placer f√≠sico."
    },
    "3.3": {
        "categoria": "Masturbaci√≥n",
        "subcategoria": "Relaci√≥n con la intimidad",
        "descriptor": "V√≠nculo entre la masturbaci√≥n y la privacidad del sujeto.",
        "observable": "Relatos de momentos en soledad, rituales √≠ntimos, ocultamiento frente a otros."
    },
    "3.4": {
        "categoria": "Masturbaci√≥n",
        "subcategoria": "Representaciones culturales",
        "descriptor": "Significados sociales y personales atribuidos a la masturbaci√≥n.",
        "observable": "Expresiones de libertad, verg√ºenza, culpa, normalizaci√≥n; uso de t√©rminos religiosos o morales."
    }
}

def clasificar_reflexion_openai(texto_reflexion: str) -> str:
    prompt = f"""Sistema categorial para clasificar reflexiones:

1.1 Organizaci√≥n del tiempo
1.2 Relaciones sociales
1.3 Contextos de intimidad
1.4 Factores emocionales

2.1 Motivaciones
2.2 Pr√°cticas asociadas
2.3 Representaciones
2.4 Efectos en la trayectoria √≠ntima

3.1 Pr√°cticas de autocuidado
3.2 Placer y exploraci√≥n del cuerpo
3.3 Relaci√≥n con la intimidad
3.4 Representaciones culturales

Por favor indica el c√≥digo de la categor√≠a/subcategor√≠a que mejor describe esta reflexi√≥n:

Reflexi√≥n: \"\"\"{texto_reflexion}\"\"\"
Respuesta s√≥lo con el c√≥digo, ejemplo: 1.4
"""
    response = openai_client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0,
        max_tokens=5
    )
    return response.choices[0].message.content.strip()

def guardar_reflexion(fecha_hora, emociones, reflexion):
    categoria_auto = clasificar_reflexion_openai(reflexion)
    doc = {
        "fecha_hora": fecha_hora,
        "emociones": [{"emoji": e.split()[0], "nombre": " ".join(e.split()[1:])} for e in emociones],
        "reflexion": reflexion.strip(),
        "categoria_categorial": categoria_auto if categoria_auto else ""
    }
    coleccion_reflexiones.insert_one(doc)
    return categoria_auto

def clasificar_reflexiones_pendientes():
    pendientes = list(coleccion_reflexiones.find({"categoria_categorial": {"$exists": False}}))
    if not pendientes:
        st.info("No hay reflexiones pendientes de clasificaci√≥n.")
        return

    st.info(f"Procesando {len(pendientes)} reflexiones pendientes...")
    for doc in pendientes:
        _id = doc["_id"]
        texto = doc.get("reflexion", "").strip()
        if texto:
            try:
                cat = clasificar_reflexion_openai(texto)
                coleccion_reflexiones.update_one({"_id": _id}, {"$set": {"categoria_categorial": cat}})
                st.success(f"Reflexi√≥n {_id} categorizada como {cat}")
            except Exception as e:
                st.error(f"Error clasificando reflexi√≥n {_id}: {str(e)}")
        else:
            st.warning(f"Reflexi√≥n {_id} vac√≠a, no clasificada.")

def obtener_registros(nombre_evento):
    eventos = list(coleccion_eventos.find({"evento": nombre_evento}).sort("fecha_hora", -1))
    filas = []
    total = len(eventos)
    for i, e in enumerate(eventos):
        fecha = e["fecha_hora"].astimezone(colombia)
        anterior = eventos[i + 1]["fecha_hora"].astimezone(colombia) if i + 1 < len(eventos) else None
        diferencia = ""
        if anterior:
            detalle = relativedelta(fecha, anterior)
            diferencia = f"{detalle.years}a {detalle.months}m {detalle.days}d {detalle.hours}h {detalle.minutes}m"
        filas.append({
            "N¬∞": total - i,
            "Fecha": fecha.strftime("%Y-%m-%d"),
            "Hora": fecha.strftime("%H:%M"),
            "Duraci√≥n sin caer": diferencia
        })
    return pd.DataFrame(filas)

def obtener_reflexiones():
    docs = list(coleccion_reflexiones.find({}).sort("fecha_hora", -1))
    rows = []
    for d in docs:
        fecha = d["fecha_hora"].astimezone(colombia)
        emociones = ", ".join([e["nombre"] for e in d.get("emociones", [])])
        codigo_cat = d.get("categoria_categorial", "")
        info_cat = sistema_categorial.get(codigo_cat, {
            "categoria": "Sin categor√≠a",
            "subcategoria": "",
            "descriptor": "",
            "observable": ""
        })
        rows.append({
            "Fecha": fecha.strftime("%Y-%m-%d"),
            "Hora": fecha.strftime("%H:%M"),
            "Emociones": emociones,
            "Categor√≠a": info_cat["categoria"],
            "Subcategor√≠a": info_cat["subcategoria"],
            "Descriptor": info_cat.get("descriptor", ""),
            "Observable": info_cat.get("observable", ""),
            "Reflexi√≥n": d.get("reflexion", "")
        })
    return pd.DataFrame(rows)

# UI principal
st.title("Reinicia")
seleccion = st.selectbox("Seleccion√° qu√© registrar o consultar:", list(eventos.keys()))
opcion = eventos[seleccion]

if opcion != "reflexion":
    for key in ["texto_reflexion", "emociones_reflexion", "limpiar_reflexion", "üìù Guardar reflexi√≥n"]:
        st.session_state.pop(key, None)

if opcion in [evento_a, evento_b]:
    st.header(f"üìç Registro de evento: {seleccion}")
    fecha_hora_evento = datetime.now(colombia)
    if st.button("‚ò†Ô∏è ¬øRegistrar?"):
        coleccion_eventos.insert_one({"evento": opcion, "fecha_hora": fecha_hora_evento})
        st.session_state[opcion] = fecha_hora_evento
        st.success(f"Evento '{seleccion}' registrado a las {fecha_hora_evento.strftime('%H:%M:%S')}")
    mostrar_racha(opcion, seleccion.split()[0])

elif opcion == "reflexion":
    st.header("üß† Registrar reflexi√≥n")
    if "texto_reflexion" not in st.session_state:
        st.session_state["texto_reflexion"] = ""
    if "emociones_reflexion" not in st.session_state:
        st.session_state["emociones_reflexion"] = []
    if "limpiar_reflexion" not in st.session_state:
        st.session_state["limpiar_reflexion"] = False
    if st.session_state["limpiar_reflexion"]:
        st.session_state["texto_reflexion"] = ""
        st.session_state["emociones_reflexion"] = []
        st.session_state["limpiar_reflexion"] = False
    ultima = coleccion_reflexiones.find_one({}, sort=[("fecha_hora", -1)])
    if ultima:
        fecha = ultima["fecha_hora"].astimezone(colombia)
        st.caption(f"üìå √öltima registrada: {fecha.strftime('%Y-%m-%d %H:%M:%S')}")
    fecha_hora_reflexion = datetime.now(colombia)
    emociones_opciones = [
        "üò∞ Ansioso", "üò° Irritado / Rabia contenida", "üí™ Firme / Decidido",
        "üòå Aliviado / Tranquilo", "üòì Culpable", "ü•± Ap√°tico / Cansado", "üòî Triste"
    ]
    emociones = st.multiselect("¬øC√≥mo te sent√≠as?", emociones_opciones, key="emociones_reflexion")
    texto_reflexion = st.text_area("¬øQuer√©s dejar algo escrito?", height=150, key="texto_reflexion")
    puede_guardar = texto_reflexion.strip() or emociones
    if puede_guardar:
        if st.button("üìù Guardar reflexi√≥n"):
            categoria_asignada = guardar_reflexion(fecha_hora_reflexion, emociones, texto_reflexion)
            st.success(f"Reflexi√≥n guardada con categor√≠a: {categoria_asignada}")
            st.session_state["limpiar_reflexion"] = True
    st.markdown("<div style='margin-bottom: 300px;'></div>", unsafe_allow_html=True)

elif opcion == "historial":
    st.header("üìë Historial completo")
    tabs = st.tabs(["üß† Reflexiones", "‚úäüèΩ", "üí∏"])
    with tabs[0]:
        st.subheader("üìç Historial de reflexiones")
        df_r = obtener_reflexiones()
        for i, row in df_r.iterrows():
            with st.expander(f"{row['Fecha']} {row['Hora']} - {row['Categor√≠a']} / {row['Subcategor√≠a']}"):
                st.write(f"**Emociones:** {row['Emociones']}")
                st.write(f"**Reflexi√≥n:** {row['Reflexi√≥n']}")
                if row['Descriptor']:
                    st.markdown(f"**Descriptor:** {row['Descriptor']}")
                if row['Observable']:
                    st.markdown(f"**Observable:** {row['Observable']}")
        if st.button("Clasificar todas las reflexiones pendientes"):
            clasificar_reflexiones_pendientes()
    def mostrar_tabla_eventos(nombre_evento):
        st.subheader(f"üìç Registros de {nombre_evento}")
        mostrar = st.checkbox("Ver/Ocultar registros", value=False, key=f"mostrar_{nombre_evento}")
        df = obtener_registros(nombre_evento)
        if mostrar:
            st.dataframe(df, use_container_width=True, hide_index=True)
        else:
            df_oculto = df.copy()
            df_oculto["Fecha"] = "‚Ä¢‚Ä¢‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-‚Ä¢‚Ä¢"
            df_oculto["Hora"] = "‚Ä¢‚Ä¢:‚Ä¢‚Ä¢"
            df_oculto["Duraci√≥n sin caer"] = "‚Ä¢‚Ä¢a ‚Ä¢‚Ä¢m ‚Ä¢‚Ä¢d ‚Ä¢‚Ä¢h ‚Ä¢‚Ä¢m"
            st.dataframe(df_oculto, use_container_width=True, hide_index=True)
            st.caption("üîí Registros ocultos. Activ√° el check para visualizar.")
    with tabs[1]:
        mostrar_tabla_eventos(evento_a)
    with tabs[2]:
        mostrar_tabla_eventos(evento_b)
